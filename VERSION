V419

Release Date: 2025-01-30

Bug Fix: Spawn Position Synchronization + Performance Optimization

Fixed critical spawn position desynchronization where players appeared at different positions on each client's screen.
Also fixed latency regression (35ms → 70ms) caused by excessive logging.

Root Cause:
- Server initialized players at (0, 0) by default in addPlayer()
- Server never sent initial spawn positions to clients
- Each client generated its own spawn positions locally using generateTeamSpawnPositions()
- Result: Host saw both players on left side, guest saw both players on right side
- Server collision detection used (0, 0), so knives hit even when thrown to empty space visually
- Excessive logging on every player move caused latency to double from 35ms to 70ms

Changes:
- Modified serverGameState handler to apply server positions for BOTH self and opponent
- Optimized position error calculation using squared distance (avoids sqrt())
- Self position only corrected when error² > 25 (equivalent to 5 units)
- Opponent position always updated from server (no client-side prediction)
- Removed high-frequency logs: [CLIENT-PREDICTION] on every move
- Removed high-frequency logs: [SERVER-RECONCILE] on every position update
- This ensures both clients see players at the same positions with minimal latency

Previous Fixes (V418):

Changes:
- Modified updatePlayerMovement() to skip client-side interpolation for opponent in multiplayer
- Server now sends authoritative position updates at 20Hz via serverGameState event
- Opponent position is now driven entirely by server updates (no client-side prediction)
- This ensures both players see consistent movement for all characters

Previous Fixes (V417):

Issue 1: Start Game Button Not Showing
Root Cause:
- updateStartButtonState() was using old isReady/opponentReady variables
- New team-based system stores ready status in currentRoomState.players[socketId].ready
- Function wasn't checking roomState, causing button to never show

Changes:
- Rewrote updateStartButtonState() to use currentRoomState instead of legacy variables
- Added proper host detection using currentRoomState.hostSocket === socket.id
- Added team capacity checks (1v1: 1 per team, 3v3: 1+ per team)
- Added comprehensive debugging logs with [START-CHECK] prefix
- Button now correctly shows when: all players ready + both teams filled + game not started

Issue 2: Host Disconnect Not Handled
Root Cause:
- When host closed browser, guests remained in room with no way to start game
- No notification sent to remaining players

Changes:
- Added hostDisconnected event handler
- When host disconnects, all players receive alert: "Host has left the room. Room is now closed."
- Players automatically return to main menu
- Room is deleted from server

Previous Fixes (V415):
- Fixed handleTeamSelect() to allow first-time team selection in 1v1 mode
- Only blocks team switching after player is already assigned to a team
- Added comprehensive debugging logs to track team selection flow
