V423

Release Date: 2025-01-30

Bug Fix: Movement Speed Synchronization + Grace Window Optimization

Fixed critical bug where characters moved extremely slowly with stuttering.
Reduced grace window from 150ms to 100ms for better responsiveness.

Root Cause (V423):
- Server PLAYER_SPEED was 2.5 units/sec but client expected 23.4 units/sec (9.36x mismatch)
- This caused extreme stuttering and slow movement (1 minute to reach nearby locations)
- 150ms grace window was slightly too long, causing minor jitter

Changes (V423):
- Backend fix: Server PLAYER_SPEED increased from 2.5 to 23.4 units/second (matches client)
- Frontend fix: Reduced grace window from 150ms to 100ms for better responsiveness
- Speeds now synchronized, eliminating constant position corrections

Previous Changes (V422):
- Client now receives targetX/targetZ from server in serverGameState event
- Added Number() type coercion for team comparison to handle string/number mismatches
- Added grace window after local input to prevent stale server updates overwriting fresh clicks
- For SELF: Apply server's targetX/targetZ only after grace window expires
- For SELF: Do NOT overwrite isMoving from server (let client control based on distance to target)
- For OPPONENT: Apply server's x/z/targetX/targetZ/isMoving for full server authority
- Added undefined checks for targetX/targetZ to handle mixed deployments
- Position error reconciliation (threshold 25) still applies for self to handle prediction errors
- updatePlayerMovement() now interpolates toward server-provided target, not stale local target

Previous Fixes (V420):
- Fixed spawn position bug (team type coercion)
- Fixed missing hit effects (always show blood/audio)
- Fixed latency regression (removed high-frequency logs)

Note: Map boundary restrictions remain client-side only (isWithinMapBounds in game3d.js)

Previous Fixes (V418):

Changes:
- Modified updatePlayerMovement() to skip client-side interpolation for opponent in multiplayer
- Server now sends authoritative position updates at 20Hz via serverGameState event
- Opponent position is now driven entirely by server updates (no client-side prediction)
- This ensures both players see consistent movement for all characters

Previous Fixes (V417):

Issue 1: Start Game Button Not Showing
Root Cause:
- updateStartButtonState() was using old isReady/opponentReady variables
- New team-based system stores ready status in currentRoomState.players[socketId].ready
- Function wasn't checking roomState, causing button to never show

Changes:
- Rewrote updateStartButtonState() to use currentRoomState instead of legacy variables
- Added proper host detection using currentRoomState.hostSocket === socket.id
- Added team capacity checks (1v1: 1 per team, 3v3: 1+ per team)
- Added comprehensive debugging logs with [START-CHECK] prefix
- Button now correctly shows when: all players ready + both teams filled + game not started

Issue 2: Host Disconnect Not Handled
Root Cause:
- When host closed browser, guests remained in room with no way to start game
- No notification sent to remaining players

Changes:
- Added hostDisconnected event handler
- When host disconnects, all players receive alert: "Host has left the room. Room is now closed."
- Players automatically return to main menu
- Room is deleted from server

Previous Fixes (V415):
- Fixed handleTeamSelect() to allow first-time team selection in 1v1 mode
- Only blocks team switching after player is already assigned to a team
- Added comprehensive debugging logs to track team selection flow
